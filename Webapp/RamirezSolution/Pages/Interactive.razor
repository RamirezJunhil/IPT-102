@page "/interactive"
@using RamirezSolution.Data.Classlibrary

<h3 class="header-text">CREATE READ UPDATE DELETE METHOD</h3>

<div class="form-container">
    <div class="form-group">
        <label>ID</label>
        <input type="text" class="form-control" @bind="@ID" disabled />
    </div>
    <div class="form-group">
        <label>Name</label>
        <input type="text" class="form-control" @bind="@Name" />
    </div>
    <div class="form-group">
        <label>Age</label>
        <input type="number" class="form-control" @bind="@Age" />
    </div>
    <div class="form-group">
        <label>School</label>
        <input type="text" class="form-control" @bind="@School" />
    </div>
    <div class="form-group">
        <label>Email</label>
        <input type="email" class="form-control" placeholder="user@example.com" @bind="@Email" />
    </div>
    <div class="form-group">
        <label>Address</label>
        <input type="text" class="form-control" @bind="@Address" />
    </div>
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
            <div class="alert alert-danger">@ErrorMessage</div>
    }
    <div class="button-container">
        <button class="btn btn-primary" @onclick="SaveProfile">@(isEditMode ? "UPDATE" : "CREATE")</button>
    </div>
</div>

<h3 class="header-text">PROFILES</h3>
<div class="center-button">
    <button class="btn btn-secondary" @onclick="ClearForm">CLEAR ALL DATA</button>
</div>
<table class="custom-table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Age</th>
            <th>School</th>
            <th>Email</th>
            <th>Address</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var profile in userProfiles)
        {
                <tr>
                    <td>@profile.ID</td>
                    <td>@profile.Name</td>
                    <td>@profile.Age</td>
                    <td>@profile.School</td>
                    <td>@profile.Email</td>
                    <td>@profile.Address</td>
                    <td class="table-actions">
                        <button class="btn btn-warning btn-sm" @onclick="() => EditProfile(profile.ID)">UPDATE</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteProfile(profile.ID)">DELETE</button>
                    </td>
                </tr>
        }
    </tbody>
</table>

@code {
    private int ID { get; set; }
    private string Name { get; set; } = string.Empty;
    private int Age { get; set; }
    private string School { get; set; } = string.Empty;
    private string Email { get; set; } = string.Empty;
    private string Address { get; set; } = string.Empty;
    private string ErrorMessage { get; set; } = string.Empty;
    private List<UserProfile> userProfiles = new List<UserProfile>();
    private bool isEditMode = false;
    private int editID = -1;

    private void SaveProfile()
    {
        if (string.IsNullOrWhiteSpace(Name) || Age <= 0 ||
            string.IsNullOrWhiteSpace(School) || string.IsNullOrWhiteSpace(Email) ||
            !IsValidEmail(Email) || string.IsNullOrWhiteSpace(Address))
        {
            ErrorMessage = "All fields are required, and the email must be valid.";
            return;
        }

        if (isEditMode)
        {
            var profile = userProfiles.FirstOrDefault(p => p.ID == editID);
            if (profile != null)
            {
                profile.Name = Name;
                profile.Age = Age;
                profile.School = School;
                profile.Email = Email;
                profile.Address = Address;
            }
            isEditMode = false;
            editID = -1;
        }
        else
        {
            var newProfile = new UserProfile
                {
                    ID = userProfiles.Count + 1, // Generate new ID
                    Name = Name,
                    Age = Age,
                    School = School,
                    Email = Email,
                    Address = Address
                };
            userProfiles.Add(newProfile);
        }
        ClearFormFields();
        ErrorMessage = string.Empty;
    }

    private void EditProfile(int id)
    {
        var profile = userProfiles.FirstOrDefault(p => p.ID == id);
        if (profile != null)
        {
            ID = profile.ID;
            Name = profile.Name;
            Age = profile.Age;
            School = profile.School;
            Email = profile.Email;
            Address = profile.Address;
            isEditMode = true;
            editID = id;
        }
    }

    private void DeleteProfile(int id)
    {
        var profile = userProfiles.FirstOrDefault(p => p.ID == id);
        if (profile != null)
        {
            userProfiles.Remove(profile);
        }
    }

    private void ClearForm()
    {
        ClearFormFields();
        userProfiles.Clear();
    }

    private void ClearFormFields()
    {
        ID = 0;
        Name = string.Empty;
        Age = 0;
        School = string.Empty;
        Email = string.Empty;
        Address = string.Empty;
        ErrorMessage = string.Empty;
    }

    private bool IsValidEmail(string email)
    {
        return email.Contains("@") && email.Contains(".") && email.IndexOf('@') < email.LastIndexOf('.');
    }
}

<style>
    h3 {
        font-size: 500%;
        font-style: initial;
        color: black;
        background-color: white;
        text-align: center; /* Centers the text within its container */
        margin: 0 auto; /* Centers the element itself if it has a width */
        width: fit-content; /* Optional: adjusts width to fit the content, so it centers within a parent container */
    }

    /* Unique table styling centered */
    .custom-table {
        max-width: 80%;
        margin: 20px auto;
        border-collapse: collapse;
        font-family: 'Arial', sans-serif;
        background-color: #f3f4f6;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        overflow: hidden;
    }

        .custom-table thead th {
            background-color: #4a5568;
            color: #ffffff;
            padding: 12px;
            text-align: center;
            font-size: 16px;
            text-transform: uppercase;
        }

        .custom-table tbody tr {
            transition: background-color 0.3s ease;
        }

            .custom-table tbody tr:nth-child(even) {
                background-color: #e2e8f0;
            }

            .custom-table tbody tr:hover {
                background-color: #cbd5e0;
            }

        .custom-table td {
            padding: 12px;
            text-align: center;
            border-top: 1px solid #e2e8f0;
            font-size: 15px;
        }

    .table-actions button {
        margin: 0 5px;
    }

    /* Style for header text */
    .header-text {
        font-size: 24px;
        color: #2d3748;
        margin-bottom: 20px;
        text-align: center;
    }

    /* Form container styling */
    .form-container {
        max-width: 600px;
        margin: auto;
        padding: 20px;
        background-color: #edf2f7;
        border-radius: 8px;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    }

        .form-container .form-group label {
            color: #2d3748;
            font-weight: bold;
        }

    .button-container {
        text-align: center;
        margin-top: 15px;
    }

    /* Centering the button */
    .center-button {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }
</style>
