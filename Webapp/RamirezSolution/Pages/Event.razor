@page "/Event"

<h3>EVENT</h3>

@if (!string.IsNullOrEmpty(ValidationMessage))
{
    <p class="validation-message">@ValidationMessage</p>
}

<div class="form-container">
    <div class="form-row">
        <label for="name">Name: </label>
        <input @bind="Name" id="NAME" placeholder="Enter your name" required />
    </div>

    <div class="form-row">
        <label for="middleName">Middle Name: </label>
        <input @bind="MiddleName" id="middleName" placeholder="Enter your middle name" />
    </div>

    <div class="form-row">
        <label for="lastName">Last Name: </label>
        <input @bind="LastName" id="lastName" placeholder="Enter your last name" required />
    </div>

    <div class="form-row">
        <label for="age">Age: </label>
        <input @bind="Age" id="age" type="number" placeholder="Enter your age" min="1" required />
    </div>

    <button @onclick="HandleSubmit" class="submit-button">@(IsEditing ? "Update" : "Create")</button>
</div>

@if (Entries.Any())
{
    <h4>SUCCESSFULLY ADDED INFORMATION</h4>
    <table class="styled-table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Middle Name</th>
                <th>Last Name</th>
                <th>Age</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var entry in Entries)
            {
                <tr>
                    <td>@entry.Id</td>
                    <td>@entry.Name</td>
                    <td>@entry.MiddleName</td>
                    <td>@entry.LastName</td>
                    <td>@entry.Age</td>
                    <td>
                        <button @onclick="() => EditEntry(entry)" class="action-button">UPDATE</button>
                        <button @onclick="() => DeleteEntry(entry)" class="action-button">DELETE</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: transparent;
        color: #333;
    }

    h3 {
        font-size: 500%;
        font-style: initial;
    }

    .form-container {
        display: grid;
        grid-template-columns: 1fr;
        gap: 10px;
        background-color: cyan;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 8px;
        margin-bottom: 20px;
    }

    .form-row {
        display: flex;
        flex-direction: column;
    }

        .form-row label {
            font-weight: bold;
            margin-bottom: 5px;
        }

    input {
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 1em;
    }

    .submit-button {
        background-color: #4CAF50;
        color: white;
        padding: 10px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        width: 100%;
        font-size: 1em;
    }

        .submit-button:hover {
            background-color: #45a049;
        }

    .styled-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

        .styled-table th, .styled-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .styled-table th {
            background-color: #f4f4f4;
            font-weight: bold;
        }

        .styled-table tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        .styled-table tr:hover {
            background-color: #e0e0e0;
        }

    .validation-message {
        color: red;
        font-weight: bold;
        margin-bottom: 20px;
    }

    .action-button {
        background-color: #007bff;
        color: white;
        padding: 5px 10px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        margin-right: 5px;
    }

        .action-button:hover {
            background-color: #0056b3;
        }
</style>

@code {
    private string Name { get; set; } = string.Empty;
    private string MiddleName { get; set; } = string.Empty;
    private string LastName { get; set; } = string.Empty;
    private int Age { get; set; }
    private bool IsEditing { get; set; } = false;
    private List<Entry> Entries { get; set; } = new List<Entry>();
    private Entry? EntryToEdit { get; set; }
    private string ValidationMessage { get; set; } = string.Empty;
    private int nextId = 1;

   
    private void HandleSubmit()
    {
        ValidationMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(Name))
        {
            ValidationMessage = "Name is required.";
            return;
        }

        if (string.IsNullOrWhiteSpace(LastName))
        {
            ValidationMessage = "Last Name is required.";
            return;
        }

        if (Age <= 0)
        {
            ValidationMessage = "Age must be a positive number.";
            return;
        }

        if (IsEditing && EntryToEdit != null)
        {
            UpdateEntry(EntryToEdit);
        }
        else
        {
            CreateEntry();
        }

        ClearForm();
    }


    private void CreateEntry()
    {
        Entries.Add(new Entry { Id = nextId++, Name = Name, MiddleName = MiddleName, LastName = LastName, Age = Age });
    }

    private void UpdateEntry(Entry entry)
    {
        entry.Name = Name;
        entry.MiddleName = MiddleName;
        entry.LastName = LastName;
        entry.Age = Age;
        IsEditing = false;
        EntryToEdit = null;
    }

    private void EditEntry(Entry entry)
    {
        Name = entry.Name;
        MiddleName = entry.MiddleName;
        LastName = entry.LastName;
        Age = entry.Age;
        IsEditing = true;
        EntryToEdit = entry;
    }

    private void DeleteEntry(Entry entry)
    {
        Entries.Remove(entry);
        ReassignIds(); 
    }

    private void ReassignIds()
    {
        
        for (int i = 0; i < Entries.Count; i++)
        {
            Entries[i].Id = i + 1;
        }
        nextId = Entries.Count + 1; 
    }

    private void ClearForm()
    {
        Name = string.Empty;
        MiddleName = string.Empty;
        LastName = string.Empty;
        Age = 0;
    }

    private class Entry
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string MiddleName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public int Age { get; set; }
    }
}
