@page "/"

<!-- Header for the CRUD operation section -->
<h3>SIR ROCHIE GWAPO</h3>

<!-- Form group for input fields -->
<div class="form-group">
    <label for="">Title</label>
    <input id="" @bind="book.Title" class="form-control" />

    <label for="">Borrower</label>
    <input id="" @bind="book.Borrower" class="form-control" />
</div>

<!-- Buttons for adding a new book and saving changes -->
<button class="btn btn-primary" @onclick="AddBook" disabled="@isEditing">Add Book</button>
<button class="btn btn-success" @onclick="Save" disabled="@(!isEditing)">Save Changes</button>

<!-- Section to display the list of added books -->
<h4>Books Added:</h4>
@if (books.Any())
{
    <!-- Table to display book details -->
    <table class="table table-striped">
        <thead>
            <tr>
                <th>BookID</th>
                <th>Title</th>
                <th>Borrower</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var b in books)
            {
                <tr>
                    <td>@b.BookID</td>
                    <td>@b.Title</td>
                    <td>@b.Borrower</td>
                    <td>
                        <!-- Edit and Delete buttons for each book -->
                        <button class="btn btn-warning" @onclick="() => EditBook(b.BookID)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteBook(b.BookID)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <!-- Message when no books are added -->
    <p>NO BOOKS STILL ADDED:</p>
}

@code {
    private BookModel book = new();  // Book model for the input fields
    private List<BookModel> books = new();  // List to store added books
    private static int _bookIDCounter = 1;  // Static counter for auto-generating unique BookID
    private bool isEditing = false;  // Flag to track if we're editing a book
    private int editingBookID = 0;  // Store the ID of the book being edited

    // Adds a new book to the list
    private void AddBook()
    {
        if (!string.IsNullOrWhiteSpace(book.Title) && !string.IsNullOrWhiteSpace(book.Borrower))
        {
            var newBook = new BookModel
            {
              BookID = _bookIDCounter++,  // Assign a unique BookID and increment the counter
              Title = book.Title,
              Borrower = book.Borrower
            };
            books.Add(newBook);
            UpdateBookIds();

            // Reset the form after adding the book
            book = new BookModel();
        }
    }

    // Prepares a book for editing based on its BookID
    private void EditBook(int bookID)
    {
        var bookToEdit = books.FirstOrDefault(b => b.BookID == bookID);
        if (bookToEdit != null)
        {
            book = new BookModel { BookID = bookToEdit.BookID, Title = bookToEdit.Title, Borrower = bookToEdit.Borrower };
            isEditing = true;
            editingBookID = bookToEdit.BookID;
        }
    }

    // Saves changes made to the currently edited book
    private void Save()
    {
        if (isEditing)
        {
            var bookToUpdate = books.FirstOrDefault(b => b.BookID == editingBookID);
            if (bookToUpdate != null)
            {
                bookToUpdate.Title = book.Title;
                bookToUpdate.Borrower = book.Borrower;

                // Reset form and editing state
                isEditing = false;
                book = new BookModel();
            }
        }
    }

    // Deletes a book by its BookID without reusing the ID
    private void DeleteBook(int bookID)
    {
        var bookToDelete = books.FirstOrDefault(b => b.BookID == bookID);
        if (bookToDelete != null)
        {
            books.Remove(bookToDelete);
            UpdateBookIds();
        }
    }

    // Method to update book IDs to keep them sequential
    private void UpdateBookIds()
    {
        for (int i = 0; i < books.Count; i++)
        {
            books[i].BookID = i + 1;
        }
    }


    // Model for representing a book
    public class BookModel
    {
        public int BookID { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Borrower { get; set; } = string.Empty;
    }
}
